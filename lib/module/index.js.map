{"version":3,"sources":["index.tsx"],"names":["requireNativeComponent","React","PropTypes","PlayerEvents","RNKalturaPlayer","PLAYER_TYPE","MEDIA_FORMAT","MEDIA_ENTRY_TYPE","KalturaPlayer","Component","nativeProps","nativeComponentRef","setNativeProps","console","log","addListeners","removeListeners","options","id","partnerId","playerInitOptions","asset","assetId","mediaAsset","load","play","pause","stop","replay","position","seek","trackId","changeTrack","rate","playbackRate","vol","volume","isAutoPlay","autoPlay","KS","ks","index","zIndex","componentDidMount","componentWillUnmount","render","props","nativeRef","propTypes","style","object"],"mappings":"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","sourcesContent":["import {\n  requireNativeComponent,\n  ViewStyle,\n} from 'react-native';\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport PlayerEvents from 'src/events/PlayerEvents'\n\nconst RNKalturaPlayer = requireNativeComponent('KalturaPlayerView');\n\ninterface KalturaPlayerProps {\n  style: ViewStyle,\n  playerType: PLAYER_TYPE\n}\n\nexport default PlayerEvents\n\nexport enum PLAYER_TYPE {\n  OVP = \"ovp\",\n  OTT = \"ott\",\n  BASIC = \"basic\"\n}\n\nexport enum MEDIA_FORMAT {\n  DASH = \"dash\",\n  HLS = \"hls\",\n  WVM = \"wvm\",\n  MP4 = \"mp4\",\n  MP3 = \"mp3\",\n  UDP = \"udp\"\n}\n\nexport enum MEDIA_ENTRY_TYPE {\n  VOD = \"Vod\",\n  LIVE = \"Live\",\n  DVRLIVE = \"DvrLive\"\n}\n\nexport class KalturaPlayer extends React.Component<KalturaPlayerProps> {\n  nativeComponentRef: any;\n  eventListener: any;\n  playerType: PLAYER_TYPE | undefined;\n\n  static propTypes: {\n    style: object\n  };\n\n  componentDidMount() {\n    console.log(\"componentDidMount from Library.\");\n  }\n\n  componentWillUnmount() {\n    console.log(\"componentWillUnmount from Library\");\n  }\n\n  setNativeProps = (nativeProps: any) => {\n    this.nativeComponentRef.setNativeProps(nativeProps);\n  }\n\n  /**\n   * Add the listners for the Kaltura Player\n   */\n  addListeners = () => {\n    console.log(\"Calling Native Prop addListeners()\")\n    this.setNativeProps({ addListeners: true });\n  }\n\n  /**\n   * Add the listners for the Kaltura Player\n   */\n  removeListeners = () => {\n    console.log(\"Calling Native Prop removeListeners()\")\n    this.setNativeProps({ removeListeners: true });\n  }\n\n  /**\n   * This method creates a Player instance internally (Basic, OVP/OTT Player)\n   * We this, it take the PlayerInitOptions which are having essential Player settings values\n   * helpful for the playback\n   * \n   * @param options PlayerInitOptions JSON String\n   * @param id PartnerId (Don't pass this parameter for BasicPlayer. For OVP/OTT player this value\n   * should be always greater than 0 and should be valid otherwise, we will not be able to featch the details\n   * for the mediaId or the entryId)\n   */\n  setup = (options: string, id: number = 0) => {\n    console.log(\"Setting up the Player\")\n    this.setNativeProps({ partnerId: id });\n    this.setNativeProps({ playerInitOptions: options });\n  }\n\n  /**\n   * \n   * @param id Playback URL for Kaltura Basic Player OR\n   * MediaId for Kaltura OTT Player OR\n   * EntryId for Kaltura OVP Player\n   * @param asset Media Asset JSON String\n   */\n  loadMedia = (id: string, asset: string) => {\n    console.log(\"Loading the media.\")\n    this.setNativeProps({ assetId: id });\n    this.setNativeProps({ mediaAsset: asset });\n    this.setNativeProps({ load: true });\n  }\n\n  /**\n   * Play the player if it is not playing\n   */\n  play = () => {\n    console.log(\"Calling Native Prop play()\")\n    this.setNativeProps({ play: true });\n  };\n\n  /**\n   * Pause the player if it is playing\n   */\n  pause = () => {\n    console.log(\"Calling Native Prop pause()\")\n    this.setNativeProps({ pause: true });\n  };\n\n  /**\n   * Stops the player to the initial state\n   */\n  stop = () => {\n    console.log(\"Calling Native Prop stop()\")\n    this.setNativeProps({ stop: true });\n  }\n\n  /**\n   * Replays the media from the beginning\n   */\n  replay = () => {\n    console.log(\"Calling Native Prop replay()\")\n    this.setNativeProps({ replay: true });\n  }\n\n  /**\n   * Seek the player to the specified position\n   * @param position in miliseconds (Ms)\n   */\n  seekTo = (position: number) => {\n    console.log(\"Calling Native Prop seekTo()\")\n    this.setNativeProps({ seek: position });\n  }\n\n  /**\n   * Change a specific track (Video, Audio or Text track)\n   * @param trackId Unique track ID which was sent in `tracksAvailable` event\n   */\n  changeTrack = (trackId: string) => {\n    console.log(\"Calling Native Prop changeTrack()\")\n    this.setNativeProps({ changeTrack: trackId })\n  }\n\n  /**\n   * Change the playback rate (ff or slow motion). Default is 1.0f\n   * @param rate Desired playback rate (Ex: 0.5f, 1.5f 2.0f etc)\n   */\n  setPlaybackRate = (rate: number) => {\n    console.log(\"Calling Native Prop setPlaybackRate()\")\n    this.setNativeProps({ playbackRate: rate })\n  }\n\n  /**\n    * Change the volume of the current audio track.\n    * Accept values between 0.0 and 1.0. Where 0.0 is mute and 1.0 is maximum volume.\n    * If the volume parameter is higher then 1.0, it will be converted to 1.0.\n    * If the volume parameter is lower then 0.0, it be converted to 0.0.\n    *\n    * @param vol - volume to set.\n    */\n  setVolume = (vol: number) => {\n    console.log(\"Calling Native Prop setVolume()\")\n    this.setNativeProps({ volume: vol })\n  }\n\n  setAutoPlay = (isAutoPlay: boolean) => {\n    console.log(\"Calling Native Prop setAutoPlay()\")\n    this.setNativeProps({ autoPlay: isAutoPlay})\n  }\n\n  setKS = (KS: string) => {\n    console.log(\"Calling Native Prop setKS()\")\n    this.setNativeProps({ ks: KS })\n  }\n\n  setZIndex = (index: number) => {\n    console.log(\"Calling Native Prop setZIndex()\")\n    this.setNativeProps({ zIndex: index })\n  }\n\n  render() {\n    return <RNKalturaPlayer {...this.props} ref={(nativeRef) => this.nativeComponentRef = nativeRef} />;\n  }\n}\n\nKalturaPlayer.propTypes = {\n  style: PropTypes.object,\n};\n\n\n"]}