{"version":3,"names":["requireNativeComponent","NativeModules","React","PropTypes","PlayerEvents","AdEvents","AnalyticsEvents","PLAYER_TYPE","MEDIA_FORMAT","MEDIA_ENTRY_TYPE","DRM_SCHEME","PLAYER_PLUGIN","PLAYER_RESIZE_MODES","WAKEMODE","SUBTITLE_STYLE","SUBTITLE_PREFERENCE","VIDEO_CODEC","AUDIO_CODEC","VR_INTERACTION_MODE","LOG_LEVEL","RNKalturaPlayer","KalturaPlayerModule","POSITION_UNSET","debugLogs","KalturaPlayer","Component","componentDidMount","printConsoleLog","componentWillUnmount","render","props","nativeRef","nativeComponentRef","propTypes","style","object","KalturaPlayerAPI","playerType","options","id","LogType","ERROR","BASIC","setupKalturaPlayer","asset","loadMediaKalturaPlayer","addPlayerView","removePlayerView","addKalturaPlayerListeners","removeKalturaPlayerListeners","onApplicationPaused","onApplicationResumed","configs","stringifiedJson","JSON","stringify","updatePluginConfigs","play","pause","stop","destroy","replay","position","seekTo","trackId","changeTrack","rate","changePlaybackRate","vol","setVolume","isAutoPlay","setAutoplay","KS","setKS","seekToLiveDefaultPosition","subtitleStyle","updateSubtitleStyle","mode","updateResizeMode","abrSettings","updateAbrSettings","resetAbrSettings","lowLatencyConfig","updateLLConfig","resetLLConfig","getCurrentPosition","isPlaying","isLive","positionMs","getThumbnailInfo","enabled","logLevel","DEBUG","OFF","setLogLevel","kalturaPlayerSetup","setUpPlayer","exception","Promise","reject","loadMedia","load","currentPosition","isPlayerPlaying","isPlayerLive","thumbnailInfo","requestThumbnailInfo","message","logType","LOG","console","log","WARN","warn","error"],"sources":["index.tsx"],"sourcesContent":["import { requireNativeComponent, NativeModules, ViewStyle } from 'react-native';\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { PlayerEvents } from './events/PlayerEvents';\nimport { AdEvents } from './events/AdEvents';\nimport { AnalyticsEvents } from './events/AnalyticsEvents';\nimport {\n  PLAYER_TYPE,\n  MEDIA_FORMAT,\n  MEDIA_ENTRY_TYPE,\n  DRM_SCHEME,\n  PLAYER_PLUGIN,\n  PLAYER_RESIZE_MODES,\n  WAKEMODE,\n  SUBTITLE_STYLE,\n  SUBTITLE_PREFERENCE,\n  VIDEO_CODEC,\n  AUDIO_CODEC,\n  VR_INTERACTION_MODE,\n  LOG_LEVEL,\n} from './consts';\n\nexport {\n  PlayerEvents,\n  AdEvents,\n  AnalyticsEvents,\n  PLAYER_TYPE,\n  MEDIA_FORMAT,\n  MEDIA_ENTRY_TYPE,\n  DRM_SCHEME,\n  PLAYER_PLUGIN,\n  PLAYER_RESIZE_MODES,\n  WAKEMODE,\n  SUBTITLE_STYLE,\n  SUBTITLE_PREFERENCE,\n  VIDEO_CODEC,\n  AUDIO_CODEC,\n  VR_INTERACTION_MODE,\n  LOG_LEVEL,\n};\n\nconst RNKalturaPlayer = requireNativeComponent('KalturaPlayerView');\nconst { KalturaPlayerModule } = NativeModules;\n\nconst POSITION_UNSET: number = -1;\nvar debugLogs = false;\n\ninterface KalturaPlayerProps {\n  style: ViewStyle;\n}\n\nexport class KalturaPlayer extends React.Component<KalturaPlayerProps> {\n  nativeComponentRef: any;\n\n  static propTypes: {\n    style: object;\n  };\n\n  componentDidMount() {\n    printConsoleLog('componentDidMount from Library.');\n  }\n\n  componentWillUnmount() {\n    printConsoleLog('componentWillUnmount from Library');\n  }\n\n  render() {\n    return (\n      <RNKalturaPlayer\n        {...this.props}\n        ref={(nativeRef) => (this.nativeComponentRef = nativeRef)}\n      />\n    );\n  }\n}\n\nKalturaPlayer.propTypes = {\n  style: PropTypes.object,\n};\n\nexport class KalturaPlayerAPI {\n  /**\n   * This method creates a Player instance internally (Basic, OVP/OTT Player)\n   * With this, it take the PlayerInitOptions which are having essential Player settings values\n   *\n   * @param playerType The Player Type, Basic/OVP/OTT.\n   * @param options PlayerInitOptions JSON String.\n   * @param id PartnerId (Don't pass this parameter for BasicPlayer. For OVP/OTT player this value\n   * should be always greater than 0 and should be valid otherwise, we will not be able to featch the details\n   * for the mediaId or the entryId)\n   */\n  static setup = async (\n    playerType: PLAYER_TYPE,\n    options: string,\n    id: number = 0\n  ) => {\n    if (playerType == null) {\n      printConsoleLog(`Invalid playerType = ${playerType}`, LogType.ERROR);\n      return;\n    }\n\n    if (!options && playerType != PLAYER_TYPE.BASIC) {\n      printConsoleLog(`setup, invalid options = ${options}`, LogType.ERROR);\n      return;\n    }\n    printConsoleLog('Setting up the Player');\n    return await setupKalturaPlayer(playerType, options, id);\n  };\n\n  /**\n   * Load the media with the given\n   *\n   * assetId OR mediaId OR entryID for OVP/OTT Kaltura Player\n   *\n   * playbackURL for Basic Kaltura Player\n   *\n   * @param id Playback URL for Kaltura Basic Player OR\n   * MediaId for Kaltura OTT Player OR\n   * EntryId for Kaltura OVP Player\n   * @param asset Media Asset JSON String\n   */\n  static loadMedia = async (id: string, asset: string) => {\n    if (!id) {\n      printConsoleLog(\n        `loadMedia, invalid id = ${id}`,\n        LogType.ERROR\n      );\n      return;\n    }\n\n    printConsoleLog(\n      `Loading the media. assetId is: ${id} and media asset is: ${asset}`\n    );\n\n    return await loadMediaKalturaPlayer(id, asset);\n  };\n\n  /**\n   * Adds the Native Player View to the Player if not attached\n   * Ideally this API should be called after calling {@link removePlayerView}\n   */\n  static addPlayerView = () => {\n    printConsoleLog('Calling Native method addPlayerView()');\n    KalturaPlayerModule.addPlayerView();\n  };\n\n  /**\n   * Removes the Native Player View from the Player if it is attached\n   * Ideally this API should be called after calling {@link addPlayerView}\n   */\n  static removePlayerView = () => {\n    printConsoleLog('Calling Native method removePlayerView()');\n    KalturaPlayerModule.removePlayerView();\n  };\n\n  /**\n   * Add the listners for the Kaltura Player\n   */\n  static addListeners = () => {\n    printConsoleLog('Calling Native method addListeners()');\n    KalturaPlayerModule.addKalturaPlayerListeners();\n  };\n\n  /**\n   * Add the listners for the Kaltura Player\n   */\n  static removeListeners = () => {\n    printConsoleLog('Calling Native method removeListeners()');\n    KalturaPlayerModule.removeKalturaPlayerListeners();\n  };\n\n  /**\n   * Should be called when the application is in background\n   */\n  static onApplicationPaused = () => {\n    printConsoleLog('Calling Native method onApplicationPaused()');\n    KalturaPlayerModule.onApplicationPaused();\n  };\n\n  /**\n   * Should be called when the application comes back to\n   * foreground\n   */\n  static onApplicationResumed = () => {\n    printConsoleLog('Calling Native method onApplicationResumed()');\n    KalturaPlayerModule.onApplicationResumed();\n  };\n\n  /**\n   * Update Plugin Configs\n   *\n   * @param configs Updated Plugin Configs (YouboraConfig JSON, IMAConfig JSON etc)\n   */\n  static updatePluginConfigs = (configs: object) => {\n    if (!configs) {\n      printConsoleLog(\n        `updatePluginConfig, config is invalid: ${configs}`,\n        LogType.ERROR\n      );\n      return;\n    }\n\n    const stringifiedJson = JSON.stringify(configs);\n    printConsoleLog(`Updated Plugin is: ${stringifiedJson}`);\n\n    KalturaPlayerModule.updatePluginConfigs(stringifiedJson);\n  };\n\n  /**\n   * Play the player if it is not playing\n   */\n  static play = () => {\n    printConsoleLog('Calling Native method play()');\n    KalturaPlayerModule.play();\n  };\n\n  /**\n   * Pause the player if it is playing\n   */\n  static pause = () => {\n    printConsoleLog('Calling Native method pause()');\n    KalturaPlayerModule.pause();\n  };\n\n  /**\n   * Stops the player to the initial state\n   */\n  static stop = () => {\n    printConsoleLog('Calling Native method stop()');\n    KalturaPlayerModule.stop();\n  };\n\n  /**\n   * Destroy the Kaltura Player instance\n   */\n  static destroy = () => {\n    printConsoleLog('Calling Native method destroy()');\n    KalturaPlayerModule.destroy();\n  };\n\n  /**\n   * Replays the media from the beginning\n   */\n  static replay = () => {\n    printConsoleLog('Calling Native method replay()');\n    KalturaPlayerModule.replay();\n  };\n\n  /**\n   * Seek the player to the specified position\n   * @param position in miliseconds (Ms)\n   */\n  static seekTo = (position: number) => {\n    printConsoleLog(`Calling Native method seekTo() position is: ${position}`);\n    KalturaPlayerModule.seekTo(position);\n  };\n\n  /**\n   * Change a specific track (Video, Audio or Text track)\n   * @param trackId Unique track ID which was sent in `tracksAvailable` event\n   */\n  static changeTrack = (trackId: string) => {\n    if (!trackId) {\n      printConsoleLog(`trackId is invalid which is: ${trackId}`, LogType.ERROR);\n      return;\n    }\n    printConsoleLog('Calling Native method changeTrack()');\n    KalturaPlayerModule.changeTrack(trackId);\n  };\n\n  /**\n   * Change the playback rate (ff or slow motion). Default is 1.0f\n   * @param rate Desired playback rate (Ex: 0.5f, 1.5f 2.0f etc)\n   */\n  static setPlaybackRate = (rate: number) => {\n    printConsoleLog(`Calling Native method setPlaybackRate() rate is: ${rate}`);\n    KalturaPlayerModule.changePlaybackRate(rate);\n  };\n\n  /**\n   * Change the volume of the current audio track.\n   * Accept values between 0.0 and 1.0. Where 0.0 is mute and 1.0 is maximum volume.\n   * If the volume parameter is higher then 1.0, it will be converted to 1.0.\n   * If the volume parameter is lower then 0.0, it be converted to 0.0.\n   *\n   * @param vol - volume to set.\n   */\n  static setVolume = (vol: number) => {\n    printConsoleLog('Calling Native method setVolume()');\n    KalturaPlayerModule.setVolume(vol);\n  };\n\n  /**\n   * Set the media to play automatically at the start (load)\n   * if `false`, user will have to click on UI play button\n   *\n   * @param isAutoPlay media should be autoplayed at the start or not\n   */\n  static setAutoPlay = (isAutoPlay: boolean) => {\n    printConsoleLog('Calling Native method setAutoPlay()');\n    KalturaPlayerModule.setAutoplay(isAutoPlay);\n  };\n\n  /**\n   * Set the KS for the media (only for OVP/OTT users)\n   * Call this before calling {@link loadMedia}\n   * @param KS Kaltura Secret key\n   */\n  static setKS = (KS: string) => {\n    if (!KS) {\n      printConsoleLog('KS is invalid which is: ' + KS, LogType.ERROR);\n      return;\n    }\n    printConsoleLog('Calling Native method setKS()');\n    KalturaPlayerModule.setKS(KS);\n  };\n\n  /**\n   * NOOP\n   * @param index\n   */\n  //static setZIndex = (index: number) => {\n  //  printConsoleLog('Calling Native method setZIndex()');\n  //};\n\n  /**\n   * Only for Live Media.\n   * Seek player to Live Default Position.\n   */\n  static seekToLiveDefaultPosition = () => {\n    printConsoleLog('Calling Native method seekToLiveDefaultPosition()');\n    KalturaPlayerModule.seekToLiveDefaultPosition();\n  };\n\n  /**\n   * Update the existing subtitle styling\n   */\n  static updateSubtitleStyle = (subtitleStyle: string) => {\n    if (!subtitleStyle) {\n      printConsoleLog(\n        `subtitleStyle is invalid which is: ${subtitleStyle}`,\n        LogType.ERROR\n      );\n      return;\n    }\n    printConsoleLog('Calling Native method updateSubtitleStyle()');\n    KalturaPlayerModule.updateSubtitleStyle(subtitleStyle);\n  };\n\n  /**\n   * Update the Resize Mode\n   */\n  static updateResizeMode = (mode: PLAYER_RESIZE_MODES) => {\n    printConsoleLog('Calling Native method updateSurfaceAspectRatioResizeMode()');\n    KalturaPlayerModule.updateResizeMode(mode);\n  };\n\n  /**\n   * Update the ABR Settings\n   */\n  static updateAbrSettings = (abrSettings: string) => {\n    if (!abrSettings) {\n      printConsoleLog(\n        `abrSettings is invalid which is: ${abrSettings}`,\n        LogType.ERROR\n      );\n      return;\n    }\n    printConsoleLog('Calling Native method updateABRSettings()');\n    KalturaPlayerModule.updateAbrSettings(abrSettings);\n  };\n\n  /**\n   * Reset the ABR Settings\n   */\n  static resetAbrSettings = () => {\n    printConsoleLog('Calling Native method resetABRSettings()');\n    KalturaPlayerModule.resetAbrSettings();\n  };\n\n  /**\n   * Update the Low Latency Config\n   * Only for Live Media\n   */\n  static updateLowLatencyConfig = (lowLatencyConfig: string) => {\n    if (!lowLatencyConfig) {\n      printConsoleLog(\n        `lowLatencyConfig is invalid which is: ${lowLatencyConfig}`,\n        LogType.ERROR\n      );\n      return;\n    }\n    printConsoleLog('Calling Native method updateLowLatencyConfig()');\n    KalturaPlayerModule.updateLLConfig(lowLatencyConfig);\n  };\n\n  /**\n   * Reset the Low Latency Config\n   * Only for Live Media\n   */\n  static resetLowLatencyConfig = () => {\n    printConsoleLog('Calling Native method resetLowLatencyConfig()');\n    KalturaPlayerModule.resetLLConfig();\n  };\n\n  /**\n   * Get the current playback position for Content and Ad\n   * @returns number: Position of the player or {@link POSITION_UNSET}\n   */\n  static getCurrentPosition = async () => {\n    printConsoleLog('Calling Native method getCurrentPosition()');\n    return await getCurrentPosition();\n  };\n\n  /**\n   * Checks if Player is currently playing or not\n   * @returns boolean\n   */\n  static isPlaying = async () => {\n    printConsoleLog('Calling Native method isPlaying');\n    return await isPlaying();\n  };\n\n  /**\n   * Checks if the stream is Live or Not\n   * @returns boolean\n   */\n  static isLive = async () => {\n    printConsoleLog('Calling Native method isLive');\n    return await isLive();\n  };\n\n  /**\n   * Get the Information for a thumbnail image by position.\n   *\n   * @param positionMs - relevant image for given player position.\n   * @returns ThumbnailInfo JSON object\n   */\n   static requestThumbnailInfo = async (positionMs: number) => {\n    printConsoleLog('requestThumbnailInfo');\n    if (positionMs < 0) {\n      printConsoleLog(`Invalid positionMs = ${positionMs}`, LogType.ERROR);\n      return;\n    }\n    return await getThumbnailInfo(positionMs);\n  };\n\n  /**\n   * Enable the console logs for the JS bridge and Player.\n   * By default it is disabled. \n   * \n   * For logLevel options {@link LOG_LEVEL}\n   * \n   * @param enabled enable the debug logs. Just set it to `false` to disable all the logs.\n   * @param logLevel Default is `LOG_LEVEL.DEBUG` if set to `LOG_LEVEL.OFF` will turn off the logs.\n   * \n   * @returns if `enabled` is `null` then don't do anything\n   */\n  static enableDebugLogs = (enabled: boolean, logLevel: LOG_LEVEL = LOG_LEVEL.DEBUG) => {\n    if (enabled == null || logLevel == null) {\n      return;\n    }\n\n    debugLogs = enabled;\n\n    if (debugLogs === false || logLevel == LOG_LEVEL.OFF) {\n      debugLogs = false;\n      KalturaPlayerModule.setLogLevel(LOG_LEVEL.OFF);\n    } else {\n      KalturaPlayerModule.setLogLevel(logLevel);\n    }\n  };\n}\n\nasync function setupKalturaPlayer(\n  playerType: PLAYER_TYPE,\n  options: string,\n  id: number\n) {\n  try {\n    const kalturaPlayerSetup = await KalturaPlayerModule.setUpPlayer(\n      playerType,\n      id,\n      options\n    );\n    printConsoleLog(`Player is created: ${kalturaPlayerSetup}`);\n    return kalturaPlayerSetup;\n  } catch (exception) {\n    printConsoleLog(\n      `setupKalturaPlayer Exception: ${exception}`,\n      LogType.ERROR\n    );\n    return Promise.reject(exception);\n  }\n}\n\nasync function loadMediaKalturaPlayer(id: string, asset: string) {\n  try {\n    const loadMedia = await KalturaPlayerModule.load(id, asset);\n    printConsoleLog(`Media Loaded ${loadMedia}`);\n    return loadMedia;\n  } catch (exception) {\n    printConsoleLog(\n      `loadMediaKalturaPlayer Exception: ${exception}`,\n      LogType.ERROR\n    );\n    return Promise.reject(exception);\n  }\n}\n\nasync function getCurrentPosition() {\n  try {\n    const currentPosition = await KalturaPlayerModule.getCurrentPosition();\n    printConsoleLog(`Current Position: ${currentPosition}`);\n    return currentPosition;\n  } catch (exception) {\n    printConsoleLog(`Exception: ${exception}`, LogType.ERROR);\n    return POSITION_UNSET;\n  }\n}\n\nasync function isPlaying() {\n  try {\n    const isPlayerPlaying = await KalturaPlayerModule.isPlaying();\n    printConsoleLog(`isPlayerPlaying ${isPlayerPlaying}`);\n    return isPlayerPlaying;\n  } catch (exception) {\n    printConsoleLog(`Exception: ${exception}`, LogType.ERROR);\n    return false;\n  }\n}\n\nasync function isLive() {\n  try {\n    const isPlayerLive = await KalturaPlayerModule.isLive();\n    printConsoleLog(`isPlayerLive ${isPlayerLive}`);\n    return isPlayerLive;\n  } catch (exception) {\n    printConsoleLog(`Exception: ${exception}`, LogType.ERROR);\n    return false;\n  }\n}\n\nasync function getThumbnailInfo(position: number) {\n  try {\n    const thumbnailInfo = await KalturaPlayerModule.requestThumbnailInfo(position);\n    printConsoleLog(`getThumbnailInfo ${JSON.stringify(thumbnailInfo)}`);\n    return thumbnailInfo;\n  } catch (exception) {\n    printConsoleLog(`Exception: ${exception}`, LogType.ERROR);\n    return Promise.reject(exception);\n  }\n}\n\nfunction printConsoleLog(message: String, logType: LogType = LogType.LOG) {\n  if (debugLogs) {\n    switch (logType) {\n      case LogType.LOG: {\n        console.log(message);\n        break;\n      }\n      case LogType.WARN: {\n        console.warn(message);\n        break;\n      }\n      case LogType.ERROR: {\n        console.error(message);\n        break;\n      }\n      default: {\n        console.log(message);\n      }\n    }\n  }\n}\n\nenum LogType {\n  LOG,\n  WARN,\n  ERROR,\n}\n"],"mappings":"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"}